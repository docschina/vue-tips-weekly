import{_ as s,c as a,o as n,a as e}from"./app.9c8c8bcd.js";const h=JSON.parse(`{"title":"\u{1F525} (#80) Component Metadata","description":"","frontmatter":{"title":"\u{1F525} (#80) Component Metadata","head":[["link",{"rel":"canonical","href":"https://michaelnthiessen.com/weekly-080-september-28/"}]]},"headers":[{"level":2,"title":"\u{1F525} Don't Override Component CSS","slug":"\u{1F525}-don-t-override-component-css"},{"level":2,"title":"\u{1F525} Component Metadata","slug":"\u{1F525}-component-metadata"},{"level":2,"title":"\u{1F4DC} Coding Better Composables: Options Object (1/5)","slug":"\u{1F4DC}-coding-better-composables-options-object-1-5"},{"level":2,"title":"\u{1F4AC} Data structures","slug":"\u{1F4AC}-data-structures"},{"level":2,"title":"\u{1F9E0} Spaced-repetition: Async Without Await","slug":"\u{1F9E0}-spaced-repetition-async-without-await"},{"level":2,"title":"\u6765\u6E90","slug":"\u6765\u6E90"}],"relativePath":"080.md"}`),o={name:"080.md"},t=e(`<h1 id="\u{1F525}-80-component-metadata" tabindex="-1">\u{1F525} (#80) Component Metadata <a class="header-anchor" href="#\u{1F525}-80-component-metadata" aria-hidden="true">#</a></h1><p>September 2022</p><p>Hey!</p><p>This week I started recording the first batch of Mastering Nuxt 3 videos.</p><p>It&#39;s been awhile since I did lots of screencasting, so it&#39;s taking some time to find my rhythm again, but so far so good!</p><p>Enjoy these tips, and have a great week!</p><p>\u2014Michael</p><h2 id="\u{1F525}-don-t-override-component-css" tabindex="-1">\u{1F525} Don&#39;t Override Component CSS <a class="header-anchor" href="#\u{1F525}-don-t-override-component-css" aria-hidden="true">#</a></h2><p>It can be really tempting to quickly modify a component&#39;s CSS from outside the component. If all you need is a slight modification, it seems harmless \u2014 but it&#39;s not.</p><p>Let&#39;s say you have a normally blue button, but you need it to be green in this specific case. You can override the background colour from the parent component like this:</p><div class="language-html"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">green</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Make this button green</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">green</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">button</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">background</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> green</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>This <em>does</em> work, but it&#39;s very fragile and prone to breaking.</p><p>What if the class name changes?</p><p>What if the HTML of the component is modified?</p><p>Anyone making changes to the button component will have no idea that this component&#39;s background colour is overridden. They won&#39;t know to update this component too.</p><p>Instead, we can just extend the functionality of the button component. That way, we keep all of the code that modifies the button inside the button component.</p><p>Here, we can add a <code>is-green</code> prop to the button component:</p><div class="language-html"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">is-green</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Make this button green</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/* No extra styles needed! */</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>Adding to the component itself makes it easier for anyone else who might need this button to be green in the future!</p><p>I&#39;ve created a demo showing the original component and the new one with the added prop: <a href="https://codesandbox.io/s/wizardly-aryabhata-kn37d?file=/src/components/Button.vue" target="_blank" rel="noopener noreferrer">https://codesandbox.io/s/wizardly-aryabhata-kn37d?file=/src/components/Button.vue</a></p><h2 id="\u{1F525}-component-metadata" tabindex="-1">\u{1F525} Component Metadata <a class="header-anchor" href="#\u{1F525}-component-metadata" aria-hidden="true">#</a></h2><p>Not every bit of info you add to a component is state. For example, sometimes, you need to add metadata that gives <em>other</em> components more information.</p><p>For example, if you want this layout to know how many columns each widget should take up, you can add that directly on the component as metadata:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">LiveUsersWidget</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Just add it as an extra property</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">columns</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>You&#39;ll find this metadata as a property on the component:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> LiveUsersWidget </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./LiveUsersWidget.vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> columns </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> LiveUsersWidget</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>You can also access the metadata from within the component through the special <code>$options</code> property:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">LiveUsersWidget</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">columns</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// \`$options\` contains all the metadata for a component</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Using </span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">metadata</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> columns</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>Just keep in mind that this metadata is the same for each component instance and is <em>not</em> reactive.</p><p>Other uses for this include (but are not limited to):</p><ul><li>Keeping version numbers for individual components</li><li>Custom flags for build tools to treat components differently</li><li>Adding custom features to components beyond computed props, data, watchers, etc.</li><li>and many more I can&#39;t think of!</li></ul><p>See a live example here: <a href="https://codesandbox.io/s/vue-metadata-bew9j?file=/src/App.vue" target="_blank" rel="noopener noreferrer">https://codesandbox.io/s/vue-metadata-bew9j?file=/src/App.vue</a></p><h2 id="\u{1F4DC}-coding-better-composables-options-object-1-5" tabindex="-1">\u{1F4DC} Coding Better Composables: Options Object (1/5) <a class="header-anchor" href="#\u{1F4DC}-coding-better-composables-options-object-1-5" aria-hidden="true">#</a></h2><p>I teamed up with Vue Mastery to create this series on coding better composables.</p><p>In this series we cover five different patterns.</p><p>For each, we show how you can implement it and then we see it in action with a composable from VueUse.</p><p>This first article is on using an options object to easily configure the behaviour of your composable.</p><p>Read it here: <a href="https://www.vuemastery.com/blog/coding-better-composables-1-of-5" target="_blank" rel="noopener noreferrer">Coding Better Composables: Options Object (1/5)</a></p><h2 id="\u{1F4AC}-data-structures" tabindex="-1">\u{1F4AC} Data structures <a class="header-anchor" href="#\u{1F4AC}-data-structures" aria-hidden="true">#</a></h2><p>&quot;Bad programmers worry about the code. Good programmers worry about data structures and their relationships.&quot; \u2014Linus Torvalds</p><h2 id="\u{1F9E0}-spaced-repetition-async-without-await" tabindex="-1">\u{1F9E0} Spaced-repetition: Async Without Await <a class="header-anchor" href="#\u{1F9E0}-spaced-repetition-async-without-await" aria-hidden="true">#</a></h2><p><strong>The best way to commit something to long-term memory is to periodically review it, gradually increasing the time between reviews \u{1F468}\u200D\u{1F52C}</strong></p><p><strong>Actually remembering these tips is much more useful than just a quick distraction, so here&#39;s a tip from a couple weeks ago to jog your memory.</strong></p><p>Using async logic with the composition API can be tricky at times.</p><p>We need to put things in the correct order, or the <code>await</code> keyword will mess things up with our reactivity.</p><p>But with the Async Without Await pattern, we don\u2019t need to worry about all of this:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> title </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Basic Title</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// We can place this async function wherever we want</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useAsyncState</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">fetchData</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> betterTitle </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">computed</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">!</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Here\u2019s how this works:</p><ol><li>We hook up all of our refs <em>synchronously</em></li><li>Updates happen <em>asynchronously</em> in the background</li><li>Because of reactivity, everything \u201Cjust works\u201D</li></ol><p>Here\u2019s a basic sketch of what the <code>useAsyncState</code> composable from VueUse is doing to implement this:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useAsyncState</span><span style="color:#A6ACCD;">(promise) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 1. Create state ref synchronously</span></span>
<span class="line"><span style="color:#A6ACCD;">  const state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  const </span><span style="color:#82AAFF;">execute</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 3. Reactivity will update this when it resolves</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">promise</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 2. Execute promise asynchronously in the background</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">execute</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  return state;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><em>p.s. I also have three courses: <a href="https://michaelnthiessen.com/vue-tips-collection" target="_blank" rel="noopener noreferrer">Vue Tips Collection</a>, <a href="https://michaelnthiessen.com/reusable-components" target="_blank" rel="noopener noreferrer">Reusable Components</a> and <a href="https://michaelnthiessen.com/clean-components" target="_blank" rel="noopener noreferrer">Clean Components</a></em></p><h2 id="\u6765\u6E90" tabindex="-1">\u6765\u6E90 <a class="header-anchor" href="#\u6765\u6E90" aria-hidden="true">#</a></h2><p>\u539F\u6587 <a href="https://michaelnthiessen.com/weekly-080-september-28/" target="_blank" rel="noopener noreferrer">https://michaelnthiessen.com/weekly-080-september-28/</a></p><p>\u672C\u4F5C\u54C1\u91C7\u7528<a href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="noopener noreferrer">\u77E5\u8BC6\u5171\u4EAB\u7F72\u540D-\u76F8\u540C\u65B9\u5F0F\u5171\u4EAB 4.0 \u56FD\u9645\u8BB8\u53EF\u534F\u8BAE</a>\u8FDB\u884C\u8BB8\u53EF\u3002</p>`,55),p=[t];function l(r,c,i,y,D,F){return n(),a("div",null,p)}var C=s(o,[["render",l]]);export{h as __pageData,C as default};
