import{_ as s,c as n,o as e,a}from"./app.eecb2e30.js";const d=JSON.parse('{"title":"\u{1F525} (#78) Prose Components with Nuxt Content","description":"","frontmatter":{"title":"\u{1F525} (#78) Prose Components with Nuxt Content","head":[["link",{"rel":"canonical","href":"https://michaelnthiessen.com/weekly-078-september-14/"}]]},"headers":[{"level":2,"title":"\u{1F525} Force Vue to Re-Render Correctly","slug":"\u{1F525}-force-vue-to-re-render-correctly"},{"level":2,"title":"\u{1F525} Prose Components in Nuxt 3","slug":"\u{1F525}-prose-components-in-nuxt-3"},{"level":2,"title":"\u{1F4DC} Stop Writing Dirty Components","slug":"\u{1F4DC}-stop-writing-dirty-components"},{"level":2,"title":"\u{1F4DC} Coding Better Composables: Flexible Arguments (2/5)","slug":"\u{1F4DC}-coding-better-composables-flexible-arguments-2-5"},{"level":2,"title":"\u{1F4AC} Mass producing software","slug":"\u{1F4AC}-mass-producing-software"},{"level":2,"title":"\u{1F9E0} Spaced-repetition: Nuxt Content Queries","slug":"\u{1F9E0}-spaced-repetition-nuxt-content-queries"},{"level":2,"title":"\u6765\u6E90","slug":"\u6765\u6E90"}],"relativePath":"078.md"}'),o={name:"078.md"},l=a(`<h1 id="\u{1F525}-78-prose-components-with-nuxt-content" tabindex="-1">\u{1F525} (#78) Prose Components with Nuxt Content <a class="header-anchor" href="#\u{1F525}-78-prose-components-with-nuxt-content" aria-hidden="true">#</a></h1><p>September 2022</p><p>Hey all,</p><p>I hope you&#39;re having a lovely week!</p><p>Recently I&#39;ve been reading through Wheel of Time again. At this pace, it may take me a couple years to finish though...</p><p>Of course, I&#39;ve also been working on Mastering Nuxt 3, as well as some tips and articles for you.</p><p>Enjoy!</p><p>\u2014Michael</p><h2 id="\u{1F525}-force-vue-to-re-render-correctly" tabindex="-1">\u{1F525} Force Vue to Re-Render Correctly <a class="header-anchor" href="#\u{1F525}-force-vue-to-re-render-correctly" aria-hidden="true">#</a></h2><p>If you find yourself needing to force Vue to re-render a component, chances are the reactivity in your app is broken somewhere.</p><p>But, if you have a valid use case, <code>forceUpdate</code> is not working, or you simply need to get things working quickly, the best way to do this is through the Key Changing Technique:</p><div class="language-html"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">MyComponent</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:key</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">componentKey</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ref</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> componentKey </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> changeKey </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">componentKey</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>Here\u2019s how you\u2019d do it with the Options API if you\u2019re not using Vue 3 or the Composition API:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      componentKey</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">changeKey</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">componentKey</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>Using the <code>key</code> attribute lets us give Vue more information so it can correctly remove and replace DOM elements on the page. Because of the reactivity system, Vue can get confused about which elements need to be replaced in the DOM and which need to stay.</p><p>When we change the value of our <code>key</code>, Vue knows that this is a \u201Cnew\u201D component. It will destroy the existing component and then create and mount an entirely new one.</p><p>Problem solved!</p><p>But before you reach for this solution, make sure that there isn\u2019t a reactivity issue in your application. This should only be used as a last resort, and is not a recommended approach.</p><h2 id="\u{1F525}-prose-components-in-nuxt-3" tabindex="-1">\u{1F525} Prose Components in Nuxt 3 <a class="header-anchor" href="#\u{1F525}-prose-components-in-nuxt-3" aria-hidden="true">#</a></h2><p>With Nuxt Content 2 we can customize how Markdown gets rendered in our Nuxt 3 apps by creating our own custom <code>Prose</code> components.</p><p>We do get code highlighting built-in through Shiki, but I already have a custom theme for Prism.</p><p>So I needed to create a custom <code>ProseCode</code> component that used PrismJS to render the code blocks from my Markdown:</p><div class="language-html"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">pre</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\`language-\${language}\`</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;</span><span style="color:#F07178;">code</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-html</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">highlighted</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">code</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">pre</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Prism </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">prismjs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> props </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">withDefaults</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">defineProps</span><span style="color:#89DDFF;">&lt;{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">code</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">language</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">highlights</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">code</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">language</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">highlights</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> highlighted </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">language</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> Prism</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">highlight</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">      props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">code</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      Prism</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">languages[props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">language]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">language</span></span>
<span class="line"><span style="color:#A6ACCD;">    )</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">code</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>When we place this component in <code>~components/content</code> and name it <code>ProseCode</code>, Nuxt Content knows to use it when rendering code blocks from Markdown.</p><p>We get a few props, and then use <code>PrismJS</code> to highlight it. This is all done on the server too, so our code is already highlighted before it hits the client.</p><p>Note: the formatting inside of the <code>pre</code> tag looks weird because it will preserve <em>any</em> formatting, including newlines. Moving the <code>code</code> element to the next line and indenting would cause the code rendered to the page to also have an extra newline and a few spaces in front of it.</p><p>You can create custom <code>Prose</code> components for <a href="https://content.nuxtjs.org/api/components/prose" target="_blank" rel="noopener noreferrer">most elements</a>.</p><h2 id="\u{1F4DC}-stop-writing-dirty-components" tabindex="-1">\u{1F4DC} Stop Writing Dirty Components <a class="header-anchor" href="#\u{1F4DC}-stop-writing-dirty-components" aria-hidden="true">#</a></h2><p>Getting our code to work is great (and obviously necessary).</p><p>But as professionals, we know that getting code to \u201Cwork\u201D is only 10% of the job. It also needs to work <em>well.</em></p><p>This is why we can&#39;t write Dirty Components, but instead need to write Clean Components.</p><p>Read it here: <a href="https://michaelnthiessen.com/stop-writing-dirty-components/" target="_blank" rel="noopener noreferrer">Stop Writing Dirty Components</a></p><h2 id="\u{1F4DC}-coding-better-composables-flexible-arguments-2-5" tabindex="-1">\u{1F4DC} Coding Better Composables: Flexible Arguments (2/5) <a class="header-anchor" href="#\u{1F4DC}-coding-better-composables-flexible-arguments-2-5" aria-hidden="true">#</a></h2><p>I teamed up with Vue Mastery to create this series on coding better composables.</p><p>In this series we cover five different patterns.</p><p>For each, we show how you can implement it and then we see it in action with a composable from VueUse.</p><p>This second article is on using <code>ref</code> and <code>unref</code> to make the arguments more flexible.</p><p>Read it here: <a href="https://www.vuemastery.com/blog/coding-better-composables-2-of-5/" target="_blank" rel="noopener noreferrer">Coding Better Composables: Flexible Arguments (2/5)</a></p><h2 id="\u{1F4AC}-mass-producing-software" tabindex="-1">\u{1F4AC} Mass producing software <a class="header-anchor" href="#\u{1F4AC}-mass-producing-software" aria-hidden="true">#</a></h2><p>&quot;You can mass-produce hardware; you cannot mass-produce software; you cannot mass-produce the human mind.&quot; \u2014Michio Kaku</p><h2 id="\u{1F9E0}-spaced-repetition-nuxt-content-queries" tabindex="-1">\u{1F9E0} Spaced-repetition: Nuxt Content Queries <a class="header-anchor" href="#\u{1F9E0}-spaced-repetition-nuxt-content-queries" aria-hidden="true">#</a></h2><p><strong>The best way to commit something to long-term memory is to periodically review it, gradually increasing the time between reviews \u{1F468}\u200D\u{1F52C}</strong></p><p><strong>Actually remembering these tips is much more useful than just a quick distraction, so here&#39;s a tip from a couple weeks ago to jog your memory.</strong></p><p>Nuxt Content 2 gives us an effortless way to query our content using the <code>queryContent</code> method:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// composables/useArticles.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">queryContent</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">articles</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">where</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// Optional fields that may be true or non-existent</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">ghost</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">$ne</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">newsletter</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">$ne</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// Don&#39;t render articles scheduled for the future</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">date</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">$lte</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Date</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">only</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">title</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">description</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">date</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tags</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sort</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">date</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Here, I\u2019ve created a composable called <code>useArticles</code> for my blog, which grabs all of the content inside of the <code>content/articles/</code> directory.</p><p>The <code>queryContent</code> composable is a query <em>builder</em>, which gives us a lot of expressiveness in <em>what</em> data we fetch. Let\u2019s see how we\u2019re using this here.</p><p>First, we\u2019re using a <code>where</code> clause to filter out all the articles we don\u2019t want. Sometimes I will add an article before I want it to be \u201Cpublished\u201D to the site.</p><p>I do this by setting the <code>date</code> in the future and then only taking articles before \u201Ctoday\u201D using this clause:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#FFCB6B;">date</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">$lte</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Date</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Second, some articles are the newsletters I write each week. Others are pieces of content that I want to keep in the <code>articles</code> folder but don\u2019t want to be published.</p><p>I use frontmatter fields to specify this:</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">---</span></span>
<span class="line"><span style="color:#A6ACCD;">newsletter: true  # This is a newsletter</span></span>
<span class="line"><span style="color:#A6ACCD;">---</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">---</span></span>
<span class="line"><span style="color:#A6ACCD;">ghost: true  # This content won&#39;t appear on the site</span></span>
<span class="line"><span style="color:#A6ACCD;">---</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Third, we use the <code>only</code> clause to grab just the fields we need. By default, the <code>queryContent</code> method returns a lot of data, including the entire piece of content itself, so this can make a big difference in payload size.</p><p>Lastly, as you have probably guessed, we have a <code>sort</code> clause to sort the articles so the most recent ones appear last.</p><p>The <code>queryContent</code> composable has more options than this, which you can read about on <a href="https://content.nuxtjs.org/api/composables/query-content/" target="_blank" rel="noopener noreferrer">the docs</a>.</p><p><em>p.s. I also have three courses: <a href="https://michaelnthiessen.com/vue-tips-collection" target="_blank" rel="noopener noreferrer">Vue Tips Collection</a>, <a href="https://michaelnthiessen.com/reusable-components" target="_blank" rel="noopener noreferrer">Reusable Components</a> and <a href="https://michaelnthiessen.com/clean-components" target="_blank" rel="noopener noreferrer">Clean Components</a></em></p><h2 id="\u6765\u6E90" tabindex="-1">\u6765\u6E90 <a class="header-anchor" href="#\u6765\u6E90" aria-hidden="true">#</a></h2><p>\u539F\u6587 <a href="https://michaelnthiessen.com/weekly-078-september-14/" target="_blank" rel="noopener noreferrer">https://michaelnthiessen.com/weekly-078-september-14/</a></p><p>\u672C\u4F5C\u54C1\u91C7\u7528<a href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="noopener noreferrer">\u77E5\u8BC6\u5171\u4EAB\u7F72\u540D-\u76F8\u540C\u65B9\u5F0F\u5171\u4EAB 4.0 \u56FD\u9645\u8BB8\u53EF\u534F\u8BAE</a>\u8FDB\u884C\u8BB8\u53EF\u3002</p>`,63),p=[l];function t(r,c,i,y,D,F){return e(),n("div",null,p)}var A=s(o,[["render",t]]);export{d as __pageData,A as default};
