import{_ as s,c as e,o,a}from"./app.ebaa0619.js";const m=JSON.parse('{"title":"\u{1F525} (#74) Configurable Composables","description":"","frontmatter":{"title":"\u{1F525} (#74) Configurable Composables","head":[["link",{"rel":"canonical","href":"https://michaelnthiessen.com/weekly-074-august-17/"}]]},"headers":[{"level":2,"title":"\u{1F525} Configurable Composables","slug":"\u{1F525}-configurable-composables"},{"level":2,"title":"\u{1F525} Use quotes to watch nested values","slug":"\u{1F525}-use-quotes-to-watch-nested-values"},{"level":2,"title":"\u{1F4DC} The benefits of the Composition API","slug":"\u{1F4DC}-the-benefits-of-the-composition-api"},{"level":2,"title":"\u{1F4AC} Creating complexity","slug":"\u{1F4AC}-creating-complexity"},{"level":2,"title":"\u{1F9E0} Spaced-repetition: 6 Levels of Reusability","slug":"\u{1F9E0}-spaced-repetition-6-levels-of-reusability"},{"level":2,"title":"\u6765\u6E90","slug":"\u6765\u6E90"}],"relativePath":"074.md"}'),n={name:"074.md"},t=a(`<h1 id="\u{1F525}-74-configurable-composables" tabindex="-1">\u{1F525} (#74) Configurable Composables <a class="header-anchor" href="#\u{1F525}-74-configurable-composables" aria-hidden="true">#</a></h1><p>August 2022</p><p>Hey there!</p><p>My friend Tim Benniks from Uniform asked me to share something cool with you:</p><p>The Uniform SDK for Nuxt 3! (you can <a href="https://uniform.dev/blogs/uniforms-latest-sdk-fully-supports-vue-3-and-nuxt-3" target="_blank" rel="noopener noreferrer">find it here</a>)</p><p>Uniform lets you loosely couple all of your CMS and headless sources in one place. This gives you a composable architecture that&#39;s easy for non-devs to work with, but also keeps all of us developers happy.</p><p>It&#39;s a totally new take on the headless CMS, and it&#39;s pretty cool!</p><p>Tim also recorded a video showing how you can get a demo Nuxt app spun up in only a few minutes:</p><p><a href="https://www.youtube.com/watch?v=hKCXN_R0m54" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=hKCXN_R0m54</a></p><p>Now let&#39;s get to the tips!</p><p>\u2014 Michael</p><h2 id="\u{1F525}-configurable-composables" tabindex="-1">\u{1F525} Configurable Composables <a class="header-anchor" href="#\u{1F525}-configurable-composables" aria-hidden="true">#</a></h2><p>The key to highly reusable composables is making them configurable.</p><p>To do this we can pass in an options object as the last parameter of the composable:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCount</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">incrementBy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>This way, we can use the composable in it\u2019s default configuration:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCount</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>While still being able to access the custom behaviour if we need it.</p><p>This is how we might implement this in a composable:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCount</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> opts</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">incrementBy</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>We take our options object and destructure any values that we need out of it.</p><p>Because we are using an object for this configuration, it\u2019s very easy to add in additional properties in the future:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCount</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> opts</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">incrementBy</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">decrementBy</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>And because we don\u2019t have to worry about the order of parameters when things are inside an object, we don\u2019t break existing code!</p><h2 id="\u{1F525}-use-quotes-to-watch-nested-values" tabindex="-1">\u{1F525} Use quotes to watch nested values <a class="header-anchor" href="#\u{1F525}-use-quotes-to-watch-nested-values" aria-hidden="true">#</a></h2><p>You may not have known this, but you can easily watch nested values directly, just by using quotes:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#FFCB6B;">watch</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">$route.query.id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>This is really useful for working with deeply nested objects!</p><h2 id="\u{1F4DC}-the-benefits-of-the-composition-api" tabindex="-1">\u{1F4DC} The benefits of the Composition API <a class="header-anchor" href="#\u{1F4DC}-the-benefits-of-the-composition-api" aria-hidden="true">#</a></h2><p>This is a guest post by Andrew Schmelyun.</p><p>Go check out his blog for more awesome content like this!</p><p><a href="https://michaelnthiessen.com/why-you-should-use-composition-api/" target="_blank" rel="noopener noreferrer">Why you should be using Vue 3&#39;s Composition API</a></p><h2 id="\u{1F4AC}-creating-complexity" tabindex="-1">\u{1F4AC} Creating complexity <a class="header-anchor" href="#\u{1F4AC}-creating-complexity" aria-hidden="true">#</a></h2><p>&quot;The purpose of software engineering is to control complexity, not to create it.&quot; \u2014Unkown</p><h2 id="\u{1F9E0}-spaced-repetition-6-levels-of-reusability" tabindex="-1">\u{1F9E0} Spaced-repetition: 6 Levels of Reusability <a class="header-anchor" href="#\u{1F9E0}-spaced-repetition-6-levels-of-reusability" aria-hidden="true">#</a></h2><p><strong>The best way to commit something to long-term memory is to periodically review it, gradually increasing the time between reviews \u{1F468}\u200D\u{1F52C}</strong></p><p><strong>Actually remembering these tips is much more useful than just a quick distraction, so here&#39;s a tip from a couple weeks ago to jog your memory.</strong></p><p>There are six different levels of reusability that you can use in your components.</p><p>Each level adds more complexity but also increases your ability to reuse code.</p><p>These levels are the focus of my course, Reusable Components.</p><p>Here are the six levels of reusability:</p><ol><li><strong>Templating</strong> \u2014Reusing code by wrapping it up inside of a component</li><li><strong>Configuration</strong> \u2014Using configuration props to allow for varying behaviour</li><li><strong>Adaptability</strong>\u2014Allowing components to become future-proof</li><li><strong>Inversion</strong> \u2014Letting other components control the process</li><li><strong>Extension</strong> \u2014Using reusability throughout our component</li><li><strong>Nesting</strong>\u2014Creating powerful hierarchies of components</li></ol><p>I cover this in more detail in <a href="https://michaelnthiessen.com/6-levels-of-reusability" target="_blank" rel="noopener noreferrer">this excerpt from the course</a>.</p><p><em>p.s. I also have two courses: <a href="https://michaelnthiessen.com/reusable-components" target="_blank" rel="noopener noreferrer">Reusable Components</a> and <a href="https://michaelnthiessen.com/clean-components" target="_blank" rel="noopener noreferrer">Clean Components</a></em></p><h2 id="\u6765\u6E90" tabindex="-1">\u6765\u6E90 <a class="header-anchor" href="#\u6765\u6E90" aria-hidden="true">#</a></h2><p>\u539F\u6587 <a href="https://michaelnthiessen.com/weekly-074-august-17/" target="_blank" rel="noopener noreferrer">https://michaelnthiessen.com/weekly-074-august-17/</a></p><p>\u672C\u4F5C\u54C1\u91C7\u7528<a href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="noopener noreferrer">\u77E5\u8BC6\u5171\u4EAB\u7F72\u540D-\u76F8\u540C\u65B9\u5F0F\u5171\u4EAB 4.0 \u56FD\u9645\u8BB8\u53EF\u534F\u8BAE</a>\u8FDB\u884C\u8BB8\u53EF\u3002</p>`,47),l=[t];function p(r,i,c,y,h,u){return o(),e("div",null,l)}var f=s(n,[["render",p]]);export{m as __pageData,f as default};
