import{_ as s,c as e,o as a,a as n}from"./app.9c8c8bcd.js";const C=JSON.parse('{"title":"\u{1F525} (#79) Reactive CSS","description":"","frontmatter":{"title":"\u{1F525} (#79) Reactive CSS","head":[["link",{"rel":"canonical","href":"https://michaelnthiessen.com/weekly-079-september-21/"}]]},"headers":[{"level":2,"title":"\u{1F525} Reactive CSS","slug":"\u{1F525}-reactive-css"},{"level":2,"title":"\u{1F525} What are all these loops for?","slug":"\u{1F525}-what-are-all-these-loops-for"},{"level":2,"title":"\u{1F4DC} Vue.js Performance Guide","slug":"\u{1F4DC}-vue-js-performance-guide"},{"level":2,"title":"\u{1F4AC} Unhappy","slug":"\u{1F4AC}-unhappy"},{"level":2,"title":"\u{1F9E0} Spaced-repetition: Configurable Composables","slug":"\u{1F9E0}-spaced-repetition-configurable-composables"},{"level":2,"title":"\u6765\u6E90","slug":"\u6765\u6E90"}],"relativePath":"079.md"}'),o={name:"079.md"},l=n(`<h1 id="\u{1F525}-79-reactive-css" tabindex="-1">\u{1F525} (#79) Reactive CSS <a class="header-anchor" href="#\u{1F525}-79-reactive-css" aria-hidden="true">#</a></h1><p>September 2022</p><h2 id="\u{1F525}-reactive-css" tabindex="-1">\u{1F525} Reactive CSS <a class="header-anchor" href="#\u{1F525}-reactive-css" aria-hidden="true">#</a></h2><p>In Vue 3 we can use reactive values in our <code>&lt;style&gt;</code> block just like we can in the <code>&lt;template&gt;</code> block:</p><div class="language-html"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">scoped</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">button</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> v-bind(buttonColor)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>Behind the scenes, Vue uses CSS computed properties (aka CSS variables) scoped to each component.</p><p>The CSS remains static, but we can dynamically update the CSS variables whenever the reactive value changes.</p><p>More info can be found <a href="https://vuejs.org/api/sfc-css-features.html#v-bind-in-css" target="_blank" rel="noopener noreferrer">in the docs</a>.</p><h2 id="\u{1F525}-what-are-all-these-loops-for" tabindex="-1">\u{1F525} What are all these loops for? <a class="header-anchor" href="#\u{1F525}-what-are-all-these-loops-for" aria-hidden="true">#</a></h2><p>I always forget this, so this tip is mostly for me \u2014 hopefully, I won&#39;t have to keep looking this up!</p><p>We have 3 types of <code>for</code> loops in Javascript:</p><ol><li><code>for...in</code></li><li><code>for...of</code></li><li><code>for</code></li></ol><p>But how do you know which one to use?</p><p>For iterating through <strong>properties</strong> of an object, use <code>for...in</code>:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> numbers </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">one</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">two</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">three</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// We get the properties of the object, not the values</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> number </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> numbers) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">number</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Prints: &#39;one&#39; &#39;two&#39; &#39;three&#39;</span></span>
<span class="line"></span></code></pre></div><p>Items in a <strong>list</strong> (also called an iterable object) like an Array or Set, we use <code>for...of</code>:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> numbers </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">one</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">two</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">three</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// We get each of the elements in the Array</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> number </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> numbers) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">number</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Prints: &#39;one&#39; &#39;two&#39; &#39;three&#39;</span></span>
<span class="line"></span></code></pre></div><p>You <em>can</em> use <code>for...in</code> with an Array since all the indices are just the object&#39;s properties. But you may not get them in the correct order, and you&#39;ll also get any other properties the Array has \u{1F615}</p><p>And you know how to use a regular old <code>for</code> loop, which lets you have a lot more control with some extra typing.</p><h2 id="\u{1F4DC}-vue-js-performance-guide" tabindex="-1">\u{1F4DC} Vue.js Performance Guide <a class="header-anchor" href="#\u{1F4DC}-vue-js-performance-guide" aria-hidden="true">#</a></h2><p>MadeWithVueJS has put together a great performance guide for Vue.js.</p><p>It doesn&#39;t cover <em>how</em> to do everything, but offers a detailed checklist of things you should be considering for your application.</p><p>The guide also includes tons of resources and tools to go deeper into performance optimization.</p><p>Read it here: <a href="https://madewithvuejs.com/blog/vuejs-performance-guide" target="_blank" rel="noopener noreferrer">Vue.js Performance Guide</a></p><h2 id="\u{1F4AC}-unhappy" tabindex="-1">\u{1F4AC} Unhappy <a class="header-anchor" href="#\u{1F4AC}-unhappy" aria-hidden="true">#</a></h2><p>&quot;You&#39;re bound to be unhappy if you optimize everything.&quot; \u2014Donald Knuth</p><h2 id="\u{1F9E0}-spaced-repetition-configurable-composables" tabindex="-1">\u{1F9E0} Spaced-repetition: Configurable Composables <a class="header-anchor" href="#\u{1F9E0}-spaced-repetition-configurable-composables" aria-hidden="true">#</a></h2><p><strong>The best way to commit something to long-term memory is to periodically review it, gradually increasing the time between reviews \u{1F468}\u200D\u{1F52C}</strong></p><p><strong>Actually remembering these tips is much more useful than just a quick distraction, so here&#39;s a tip from a couple weeks ago to jog your memory.</strong></p><p>The key to highly reusable composables is making them configurable.</p><p>To do this we can pass in an options object as the last parameter of the composable:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCount</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">incrementBy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>This way, we can use the composable in it\u2019s default configuration:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCount</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>While still being able to access the custom behaviour if we need it.</p><p>This is how we might implement this in a composable:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCount</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> opts</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">incrementBy</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>We take our options object and destructure any values that we need out of it.</p><p>Because we are using an object for this configuration, it\u2019s very easy to add in additional properties in the future:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCount</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> opts</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">incrementBy</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">decrementBy</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>And because we don\u2019t have to worry about the order of parameters when things are inside an object, we don\u2019t break existing code!</p><p><em>p.s. I also have three courses: <a href="https://michaelnthiessen.com/vue-tips-collection" target="_blank" rel="noopener noreferrer">Vue Tips Collection</a>, <a href="https://michaelnthiessen.com/reusable-components" target="_blank" rel="noopener noreferrer">Reusable Components</a> and <a href="https://michaelnthiessen.com/clean-components" target="_blank" rel="noopener noreferrer">Clean Components</a></em></p><h2 id="\u6765\u6E90" tabindex="-1">\u6765\u6E90 <a class="header-anchor" href="#\u6765\u6E90" aria-hidden="true">#</a></h2><p>\u539F\u6587 <a href="https://michaelnthiessen.com/weekly-079-september-21/" target="_blank" rel="noopener noreferrer">https://michaelnthiessen.com/weekly-079-september-21/</a></p><p>\u672C\u4F5C\u54C1\u91C7\u7528<a href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="noopener noreferrer">\u77E5\u8BC6\u5171\u4EAB\u7F72\u540D-\u76F8\u540C\u65B9\u5F0F\u5171\u4EAB 4.0 \u56FD\u9645\u8BB8\u53EF\u534F\u8BAE</a>\u8FDB\u884C\u8BB8\u53EF\u3002</p>`,45),p=[l];function t(r,c,i,y,D,F){return a(),e("div",null,p)}var d=s(o,[["render",t]]);export{C as __pageData,d as default};
