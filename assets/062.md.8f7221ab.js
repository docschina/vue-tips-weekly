import{_ as s,c as e,o as n,a}from"./app.950c275a.js";const F=JSON.parse('{"title":"\u{1F525} (#62) Detect Clicks Outside of an Element","description":"","frontmatter":{"title":"\u{1F525} (#62) Detect Clicks Outside of an Element","head":[["link",{"rel":"canonical","href":"https://michaelnthiessen.com/weekly-062-may-25/"}]]},"headers":[{"level":2,"title":"\u{1F525} Detect Clicks Outside an Element","slug":"\u{1F525}-detect-clicks-outside-an-element"},{"level":2,"title":"\u{1F525} Define multiple components in a single file","slug":"\u{1F525}-define-multiple-components-in-a-single-file"},{"level":2,"title":"\u{1F4DC} Vue vs React \u2014How to Go from One Framework to the Other","slug":"\u{1F4DC}-vue-vs-react-\u2014how-to-go-from-one-framework-to-the-other"},{"level":2,"title":"\u{1F4AC} The First Step","slug":"\u{1F4AC}-the-first-step"},{"level":2,"title":"\u{1F9E0} Spaced-repetition: Next Tick: Waiting for the DOM to Update","slug":"\u{1F9E0}-spaced-repetition-next-tick-waiting-for-the-dom-to-update"},{"level":2,"title":"\u6765\u6E90","slug":"\u6765\u6E90"}],"relativePath":"062.md"}'),t={name:"062.md"},o=a(`<h1 id="\u{1F525}-62-detect-clicks-outside-of-an-element" tabindex="-1">\u{1F525} (#62) Detect Clicks Outside of an Element <a class="header-anchor" href="#\u{1F525}-62-detect-clicks-outside-of-an-element" aria-hidden="true">#</a></h1><p>May 2022</p><p>Hey!</p><p>I hope you&#39;re having a wonderful week!</p><p>As always, here are some tips for you.</p><p>\u2014 Michael</p><h2 id="\u{1F525}-detect-clicks-outside-an-element" tabindex="-1">\u{1F525} Detect Clicks Outside an Element <a class="header-anchor" href="#\u{1F525}-detect-clicks-outside-an-element" aria-hidden="true">#</a></h2><p>Sometimes I need to detect whether a click happens <em>inside</em> or <em>outside</em> of a particular element. This is the approach I typically use:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mousedown</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Get the element that was clicked</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">clickedEl</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// \`el\` is the element you&#39;re detecting clicks outside of</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">contains</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">clickedEl</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Clicked inside of \`el\`</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Clicked outside of \`el\`</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="\u{1F525}-define-multiple-components-in-a-single-file" tabindex="-1">\u{1F525} Define multiple components in a single file <a class="header-anchor" href="#\u{1F525}-define-multiple-components-in-a-single-file" aria-hidden="true">#</a></h2><p>Every now and then, you just need a small component, one that&#39;s not worth an entirely new file:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// A small, secondary component</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> SmallComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Create a component like you normally would</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">computedProps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Use the template property instead of a template block</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;div&gt;Hello!&lt;/div&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">  </span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Your main component</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">components</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> SmallComponent </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>This is perfect for reusing code within a component where a <code>v-for</code> doesn&#39;t work.</p><p>However, if the code is more complex or is likely to be used by other components, making a proper <a href="https://michaelnthiessen.com/reusable-components" target="_blank" rel="noopener noreferrer">reusable component</a> is the best way to go.</p><p><strong>Note:</strong> You can get proper syntax highlighting of the HTML string using <a href="https://marketplace.visualstudio.com/items?itemName=Tobermory.es6-string-html" target="_blank" rel="noopener noreferrer">this VSCode extension</a>.</p><h2 id="\u{1F4DC}-vue-vs-react-\u2014how-to-go-from-one-framework-to-the-other" tabindex="-1">\u{1F4DC} Vue vs React \u2014How to Go from One Framework to the Other <a class="header-anchor" href="#\u{1F4DC}-vue-vs-react-\u2014how-to-go-from-one-framework-to-the-other" aria-hidden="true">#</a></h2><p>A very interesting comparison on how the two frameworks solve different problems. I&#39;ve written React before, but it&#39;s a good refresher on how devs in React-land do common tasks.</p><p>Read it here: <a href="https://www.freecodecamp.org/news/vue-vs-react-comparison-of-frameworks/" target="_blank" rel="noopener noreferrer">Vue vs React \u2014How to Go from One Framework to the Other</a></p><h2 id="\u{1F4AC}-the-first-step" tabindex="-1">\u{1F4AC} The First Step <a class="header-anchor" href="#\u{1F4AC}-the-first-step" aria-hidden="true">#</a></h2><p>&quot;The first step of any project is to grossly underestimate its complexity and difficulty.&quot; \u2014Nicoll Hunt</p><h2 id="\u{1F9E0}-spaced-repetition-next-tick-waiting-for-the-dom-to-update" tabindex="-1">\u{1F9E0} Spaced-repetition: Next Tick: Waiting for the DOM to Update <a class="header-anchor" href="#\u{1F9E0}-spaced-repetition-next-tick-waiting-for-the-dom-to-update" aria-hidden="true">#</a></h2><p><strong>The best way to commit something to long-term memory is to periodically review it, gradually increasing the time between reviews \u{1F468}\u200D\u{1F52C}</strong></p><p><strong>Actually remembering these tips is much more useful than just a quick distraction, so here&#39;s a tip from a couple weeks ago to jog your memory.</strong></p><p>Vue gives us a super handy way for us to wait for the DOM to finish updating:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// Do something that will cause Vue to re-render</span></span>
<span class="line"><span style="color:#82AAFF;">changeTheDOM</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Wait for the re-render to finish</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">nextTick</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Now we can check out the freshly minted DOM</span></span>
<span class="line"><span style="color:#82AAFF;">inspectTheDOM</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Or if you&#39;re using the options API:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$nextTick</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>A tick is a single render cycle. Vue listens for any reactivity changes, then performs several updates to the DOM in one batch. Then the next tick begins.</p><p>If you update something in your app that will change what is rendered, you <em>have</em> to wait until the next tick before that change shows up.</p><p><em>p.s. I also have two courses: <a href="https://michaelnthiessen.com/reusable-components" target="_blank" rel="noopener noreferrer">Reusable Components</a> and <a href="https://michaelnthiessen.com/clean-components" target="_blank" rel="noopener noreferrer">Clean Components</a></em></p><h2 id="\u6765\u6E90" tabindex="-1">\u6765\u6E90 <a class="header-anchor" href="#\u6765\u6E90" aria-hidden="true">#</a></h2><p>\u539F\u6587 <a href="https://michaelnthiessen.com/weekly-062-may-25/" target="_blank" rel="noopener noreferrer">https://michaelnthiessen.com/weekly-062-may-25/</a></p><p>\u672C\u4F5C\u54C1\u91C7\u7528<a href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="noopener noreferrer">\u77E5\u8BC6\u5171\u4EAB\u7F72\u540D-\u76F8\u540C\u65B9\u5F0F\u5171\u4EAB 4.0 \u56FD\u9645\u8BB8\u53EF\u534F\u8BAE</a>\u8FDB\u884C\u8BB8\u53EF\u3002</p>`,33),l=[o];function p(r,c,i,y,h,D){return n(),e("div",null,l)}var m=s(t,[["render",p]]);export{F as __pageData,m as default};
