import{_ as e,c as s,o as a,a as n}from"./app.2c680187.js";const m=JSON.parse('{"title":"\u{1F525} (#68) Purchasing power parity! (and some tips)","description":"","frontmatter":{"title":"\u{1F525} (#68) Purchasing power parity! (and some tips)","head":[["link",{"rel":"canonical","href":"https://michaelnthiessen.com/weekly-068-july-06/"}]]},"headers":[{"level":2,"title":"\u{1F525} How to watch anything in your component","slug":"\u{1F525}-how-to-watch-anything-in-your-component"},{"level":2,"title":"\u{1F525} My favourite git commands","slug":"\u{1F525}-my-favourite-git-commands"},{"level":2,"title":"\u{1F4DC} Code Coverage for Vue Applications","slug":"\u{1F4DC}-code-coverage-for-vue-applications"},{"level":2,"title":"\u{1F4AC} Indirection","slug":"\u{1F4AC}-indirection"},{"level":2,"title":"\u{1F9E0} Spaced-repetition: Reactive CSS","slug":"\u{1F9E0}-spaced-repetition-reactive-css"},{"level":2,"title":"\u6765\u6E90","slug":"\u6765\u6E90"}],"relativePath":"068.md"}'),o={name:"068.md"},t=n(`<h1 id="\u{1F525}-68-purchasing-power-parity-and-some-tips" tabindex="-1">\u{1F525} (#68) Purchasing power parity! (and some tips) <a class="header-anchor" href="#\u{1F525}-68-purchasing-power-parity-and-some-tips" aria-hidden="true">#</a></h1><p>July 2022</p><p>Hello!</p><p>I want everyone to have equal access to learning Vue \u2014 and equal access to Vue Tips Collection.</p><p>That&#39;s why I&#39;ve put together a purchasing power parity system.</p><p>This will help equalize prices across all countries.</p><p>You&#39;ll see a discount on the sales page if you live in a country where the regular price is too expensive.</p><p>This discount varies based on the relative strength of your local currency to USD. So not every country will get a discount.</p><p><a href="https://michaelnthiessen.com/vue-tips-collection" target="_blank" rel="noopener noreferrer">See what sort of discount you may be eligible for.</a></p><p>\u2014 Michael</p><h2 id="\u{1F525}-how-to-watch-anything-in-your-component" tabindex="-1">\u{1F525} How to watch anything in your component <a class="header-anchor" href="#\u{1F525}-how-to-watch-anything-in-your-component" aria-hidden="true">#</a></h2><p>It took me a very long time to realize this, but anything in your component that is reactive can be watched:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">someComputedProperty</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// Update the computed prop</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">watch</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">someComputedProperty</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// Do something when the computed prop is updated</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>You can watch:</p><ul><li>computed props</li><li>props</li><li><a href="https://michaelnthiessen.com/use-quotes-watch-nested-values/" target="_blank" rel="noopener noreferrer">nested values</a></li></ul><p>Any value can be watched if you&#39;re using the composition API, as long as it&#39;s a <code>ref</code> or <code>reactive</code> object.</p><h2 id="\u{1F525}-my-favourite-git-commands" tabindex="-1">\u{1F525} My favourite git commands <a class="header-anchor" href="#\u{1F525}-my-favourite-git-commands" aria-hidden="true">#</a></h2><p>Here are a few of my favourite git commands (is it weird to have favourite git commands?):</p><p>I&#39;m often jumping back and forth between different branches, and typing is annoying:</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;"># Checkout the previous branch</span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout -</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Sometimes I add new files, then realize I don&#39;t actually need them:</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;"># Remove any files not tracked by git</span></span>
<span class="line"><span style="color:#A6ACCD;">git clean</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Or I completely broke everything and need to start over:</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;"># Undo all changes to git and the working directory,</span></span>
<span class="line"><span style="color:#A6ACCD;"># going back to the most recent commit</span></span>
<span class="line"><span style="color:#A6ACCD;">git reset --hard</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Github takes all of the commits on your PR branch and combines them into a single one when you merge. But sometimes you want to merge a branch, and you aren&#39;t ready for a PR just yet:</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;"># Squash all commits from a branch into one commit</span></span>
<span class="line"><span style="color:#A6ACCD;">git merge --squash &lt;branch&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">git commit</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="\u{1F4DC}-code-coverage-for-vue-applications" tabindex="-1">\u{1F4DC} Code Coverage for Vue Applications <a class="header-anchor" href="#\u{1F4DC}-code-coverage-for-vue-applications" aria-hidden="true">#</a></h2><p>Code coverage can be a useful testing metric, as long as you don&#39;t focus on it too much (that story is for another time).</p><p>But did you know you can get code coverage from your Cypress tests? I certainly didn&#39;t.</p><p>Read it here: <a href="https://vuejsdevelopers.com/2020/07/20/code-coverage-vue-cypress/" target="_blank" rel="noopener noreferrer">Code Coverage for Vue Applications</a></p><h2 id="\u{1F4AC}-indirection" tabindex="-1">\u{1F4AC} Indirection <a class="header-anchor" href="#\u{1F4AC}-indirection" aria-hidden="true">#</a></h2><p>&quot;Any problem in computer science can be solved with another layer of indirection, except of course for the problem of too many indirections.&quot; \u2014Bjarne Stroustrup</p><h2 id="\u{1F9E0}-spaced-repetition-reactive-css" tabindex="-1">\u{1F9E0} Spaced-repetition: Reactive CSS <a class="header-anchor" href="#\u{1F9E0}-spaced-repetition-reactive-css" aria-hidden="true">#</a></h2><p><strong>The best way to commit something to long-term memory is to periodically review it, gradually increasing the time between reviews \u{1F468}\u200D\u{1F52C}</strong></p><p><strong>Actually remembering these tips is much more useful than just a quick distraction, so here&#39;s a tip from a couple weeks ago to jog your memory.</strong></p><p>In Vue 3 we can use reactive values in our <code>&lt;style&gt;</code> block just like we can in the <code>&lt;template&gt;</code> block:</p><div class="language-html"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">scoped</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">button</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> v-bind(buttonColor)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>Behind the scenes, Vue uses CSS computed properties (aka CSS variables) scoped to each component.</p><p>The CSS remains static, but we can dynamically update the CSS variables whenever the reactive value changes.</p><p>More info can be found <a href="https://v3.vuejs.org/api/sfc-style.html#state-driven-dynamic-css" target="_blank" rel="noopener noreferrer">in the docs</a>.</p><p><em>p.s. I also have two courses: <a href="https://michaelnthiessen.com/reusable-components" target="_blank" rel="noopener noreferrer">Reusable Components</a> and <a href="https://michaelnthiessen.com/clean-components" target="_blank" rel="noopener noreferrer">Clean Components</a></em></p><h2 id="\u6765\u6E90" tabindex="-1">\u6765\u6E90 <a class="header-anchor" href="#\u6765\u6E90" aria-hidden="true">#</a></h2><p>\u539F\u6587 <a href="https://michaelnthiessen.com/weekly-068-july-06/" target="_blank" rel="noopener noreferrer">https://michaelnthiessen.com/weekly-068-july-06/</a></p><p>\u672C\u4F5C\u54C1\u91C7\u7528<a href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="noopener noreferrer">\u77E5\u8BC6\u5171\u4EAB\u7F72\u540D-\u76F8\u540C\u65B9\u5F0F\u5171\u4EAB 4.0 \u56FD\u9645\u8BB8\u53EF\u534F\u8BAE</a>\u8FDB\u884C\u8BB8\u53EF\u3002</p>`,44),p=[t];function l(r,c,i,h,d,y){return a(),s("div",null,p)}var g=e(o,[["render",l]]);export{m as __pageData,g as default};
