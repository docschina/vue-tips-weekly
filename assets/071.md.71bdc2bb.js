import{_ as s,c as e,o as a,a as n}from"./app.fa85f086.js";const u=JSON.parse('{"title":"\u{1F525} (#71) Great Developers","description":"","frontmatter":{"title":"\u{1F525} (#71) Great Developers","head":[["link",{"rel":"canonical","href":"https://michaelnthiessen.com/weekly-071-july-27/"}]]},"headers":[{"level":2,"title":"\u{1F525} Directly accessing parent components (and why)","slug":"\u{1F525}-directly-accessing-parent-components-and-why"},{"level":2,"title":"\u{1F525} Blockquotes","slug":"\u{1F525}-blockquotes"},{"level":2,"title":"\u{1F4DC} Ignorable Watch","slug":"\u{1F4DC}-ignorable-watch"},{"level":2,"title":"\u{1F4AC} Great Developers","slug":"\u{1F4AC}-great-developers"},{"level":2,"title":"\u{1F9E0} Spaced-repetition: Special CSS pseudo-selectors in Vue","slug":"\u{1F9E0}-spaced-repetition-special-css-pseudo-selectors-in-vue"},{"level":2,"title":"\u6765\u6E90","slug":"\u6765\u6E90"}],"relativePath":"071.md"}'),o={name:"071.md"},l=n(`<h1 id="\u{1F525}-71-great-developers" tabindex="-1">\u{1F525} (#71) Great Developers <a class="header-anchor" href="#\u{1F525}-71-great-developers" aria-hidden="true">#</a></h1><p>July 2022</p><p>Hey there,</p><p>I heard you were looking for some tips on Vue.</p><p>\u2014Michael</p><h2 id="\u{1F525}-directly-accessing-parent-components-and-why" tabindex="-1">\u{1F525} Directly accessing parent components (and why) <a class="header-anchor" href="#\u{1F525}-directly-accessing-parent-components-and-why" aria-hidden="true">#</a></h2><p>Props down, events up. That&#39;s how your components should communicate \u2014 most of the time.</p><p>But in <em>rare cases</em>, that just doesn&#39;t work.</p><p>If you need direct access to the parent component, you can use the instance property <code>$parent</code>:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// Tight coupling like this is usually a bad idea</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$parent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">methodOnParentComponent</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>You can also get direct access to the application root, the very top-most component in the tree, by using <code>$root</code>. Vue 2 also has <code>$children</code>, but it was taken out for Vue 3 (please don&#39;t use this one).</p><p><strong>When would these be useful?</strong></p><p>There are a few different scenarios I can think of. Usually, when you want to abstract some behaviour and have it work &quot;magically&quot; behind the scenes.</p><p>You don&#39;t want to use props and events to connect up a component in those cases. Instead, you use <code>provide</code>/<code>inject</code>, <code>$parent</code>, or <code>$root</code>, to <em>automatically</em> connect the components and make things happen.</p><p>But it&#39;s hard to come up with an example where this is the best solution. Using <code>provide</code>/<code>inject</code> is almost always the better choice.</p><h2 id="\u{1F525}-blockquotes" tabindex="-1">\u{1F525} Blockquotes <a class="header-anchor" href="#\u{1F525}-blockquotes" aria-hidden="true">#</a></h2><p>This element is used for quotes outside of the main flow of an article.</p><blockquote><p>Like this quote. Most browsers will indent this automatically, and most websites will add extra styling.</p></blockquote><p>While you can use a <code>div</code> with some CSS, the <code>&lt;blockquote&gt;</code> element is the semantically correct way of doing this.</p><p>In Markdown, you can use <code>&gt;</code> to get a blockquote.</p><h2 id="\u{1F4DC}-ignorable-watch" tabindex="-1">\u{1F4DC} Ignorable Watch <a class="header-anchor" href="#\u{1F4DC}-ignorable-watch" aria-hidden="true">#</a></h2><p>This article is a great look at how you can use the <code>flush</code> option with watchers to create some pretty complex and useful behaviours.</p><p>I don&#39;t want to spoil it for you though. Just read the article!</p><p>Read it here: <a href="https://patak.dev/vue/ignorable-watch.html" target="_blank" rel="noopener noreferrer">Ignorable Watch</a></p><h2 id="\u{1F4AC}-great-developers" tabindex="-1">\u{1F4AC} Great Developers <a class="header-anchor" href="#\u{1F4AC}-great-developers" aria-hidden="true">#</a></h2><p>&quot;Every great developer you know got there by solving problems they were unqualified to solve until they actually did it.&quot; \u2014Patrick McKenzie</p><h2 id="\u{1F9E0}-spaced-repetition-special-css-pseudo-selectors-in-vue" tabindex="-1">\u{1F9E0} Spaced-repetition: Special CSS pseudo-selectors in Vue <a class="header-anchor" href="#\u{1F9E0}-spaced-repetition-special-css-pseudo-selectors-in-vue" aria-hidden="true">#</a></h2><p><strong>The best way to commit something to long-term memory is to periodically review it, gradually increasing the time between reviews \u{1F468}\u200D\u{1F52C}</strong></p><p><strong>Actually remembering these tips is much more useful than just a quick distraction, so here&#39;s a tip from a couple weeks ago to jog your memory.</strong></p><p>If you want some styles to apply specifically to slot content, you can do that with the <code>:slotted</code> pseudo-selector:</p><div class="language-html"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">scoped</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/* Add margin to &lt;p&gt; tags within the slot */</span></span>
<span class="line"><span style="color:#A6ACCD;">  :slotted(</span><span style="color:#FFCB6B;">p</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">margin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">15px</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>You can also use <code>:global</code> to have styles apply to global scope, even within the <code>&lt;style scoped&gt;</code> block:</p><div class="language-html"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">scoped</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  :global(</span><span style="color:#FFCB6B;">body</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">margin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">padding</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">font-family</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> sans-serif</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>Of course, if you have lots of global styles you want to add, it&#39;s probably easier to just add a second <code>&lt;style&gt;</code> block:</p><div class="language-html"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">scoped</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/* Add margin to &lt;p&gt; tags within the slot */</span></span>
<span class="line"><span style="color:#A6ACCD;">  :slotted(</span><span style="color:#FFCB6B;">p</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">margin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">15px</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">body</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">margin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">padding</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">font-family</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> sans-serif</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>Check out <a href="https://v3.vuejs.org/api/sfc-style.html#slotted-selectors" target="_blank" rel="noopener noreferrer">the docs</a> for more info.</p><p><em>p.s. I also have two courses: <a href="https://michaelnthiessen.com/reusable-components" target="_blank" rel="noopener noreferrer">Reusable Components</a> and <a href="https://michaelnthiessen.com/clean-components" target="_blank" rel="noopener noreferrer">Clean Components</a></em></p><h2 id="\u6765\u6E90" tabindex="-1">\u6765\u6E90 <a class="header-anchor" href="#\u6765\u6E90" aria-hidden="true">#</a></h2><p>\u539F\u6587 <a href="https://michaelnthiessen.com/weekly-071-july-27/" target="_blank" rel="noopener noreferrer">https://michaelnthiessen.com/weekly-071-july-27/</a></p><p>\u672C\u4F5C\u54C1\u91C7\u7528<a href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="noopener noreferrer">\u77E5\u8BC6\u5171\u4EAB\u7F72\u540D-\u76F8\u540C\u65B9\u5F0F\u5171\u4EAB 4.0 \u56FD\u9645\u8BB8\u53EF\u534F\u8BAE</a>\u8FDB\u884C\u8BB8\u53EF\u3002</p>`,40),t=[l];function p(c,r,i,y,d,h){return a(),e("div",null,t)}var F=s(o,[["render",p]]);export{u as __pageData,F as default};
