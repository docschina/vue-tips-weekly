import{_ as s,c as a,o as n,a as e}from"./app.aea11343.js";const d=JSON.parse(`{"title":"\u{1F525} (#60) Shorthand for slots","description":"","frontmatter":{"title":"\u{1F525} (#60) Shorthand for slots","head":[["link",{"rel":"canonical","href":"https://michaelnthiessen.com/weekly-060-may-11/"}]]},"headers":[{"level":2,"title":"\u{1F525} Shorthand for named slots","slug":"\u{1F525}-shorthand-for-named-slots"},{"level":2,"title":"\u{1F525} Don't Override Component CSS","slug":"\u{1F525}-don-t-override-component-css"},{"level":2,"title":"\u{1F4DC} Manual testing, E2E testing, unit testing \u2013 how to decide which testing strategy to use?","slug":"\u{1F4DC}-manual-testing-e2e-testing-unit-testing-\u2013-how-to-decide-which-testing-strategy-to-use"},{"level":2,"title":"\u{1F4AC} Libraries","slug":"\u{1F4AC}-libraries"},{"level":2,"title":"\u{1F9E0} Spaced-repetition: Global Properties","slug":"\u{1F9E0}-spaced-repetition-global-properties"},{"level":2,"title":"\u6765\u6E90","slug":"\u6765\u6E90"}],"relativePath":"060.md"}`),o={name:"060.md"},t=e(`<h1 id="\u{1F525}-60-shorthand-for-slots" tabindex="-1">\u{1F525} (#60) Shorthand for slots <a class="header-anchor" href="#\u{1F525}-60-shorthand-for-slots" aria-hidden="true">#</a></h1><p>May 2022</p><p>Hey all!</p><p>Tomorrow is my last day at Vidyard.</p><p>I&#39;ve been there for 4.5 incredible years, and I&#39;m sad to leave.</p><p>But I&#39;m on to new and exciting things!</p><p>Friday, I leave for a vacation that I&#39;ve waited over two years for. Unfortunately, some &quot;global events&quot; interfered with that one, but we finally made it happen.</p><p>Then starting in June, my entire focus will be on bringing you more Vue content:</p><ul><li>First, I&#39;ll be releasing Vue Tips Collection in June \u{1F389}</li><li>Then, I plan on updating Clean Components \u2014 it&#39;s overdue for an overhaul! I&#39;m not sure yet what this update will look like, but it will <em>definitely</em> include Vue 3 and the composition API.</li><li>...? This is as far as my roadmap goes (for now)</li></ul><p>Of course, I&#39;ll still be sending you this weekly newsletter and writing some articles here and there.</p><p>Coming up: I&#39;ve got one on Suspense as well as parts 3-5 of the Coding Better Composables series!</p><p>And don&#39;t worry, I&#39;ll be off on vacation, but you&#39;ll still get these newsletters.</p><p>I&#39;ve been working ahead, and I have scheduled the newsletters to go out while I&#39;m away. So you should see the Vue tips in your inbox just like any other week.</p><p>\u2014 Michael</p><h2 id="\u{1F525}-shorthand-for-named-slots" tabindex="-1">\u{1F525} Shorthand for named slots <a class="header-anchor" href="#\u{1F525}-shorthand-for-named-slots" aria-hidden="true">#</a></h2><p>Named slots also have a shorthand syntax, one that&#39;s much nicer to look at.</p><p>Instead of writing this:</p><div class="language-html"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">DataTable</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-slot:header</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TableHeader</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">DataTable</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>We can write this:</p><div class="language-html"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">DataTable</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">#header</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TableHeader</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">DataTable</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>Not a huge difference, but a little cleaner for sure. I think the <code>#</code> character is easier to pick out than <code>v-slot</code> when reading code.</p><h2 id="\u{1F525}-don-t-override-component-css" tabindex="-1">\u{1F525} Don&#39;t Override Component CSS <a class="header-anchor" href="#\u{1F525}-don-t-override-component-css" aria-hidden="true">#</a></h2><p>It can be really tempting to quickly modify a component&#39;s CSS from outside the component. If all you need is a slight modification, it seems harmless \u2014 but it&#39;s not.</p><p>Let&#39;s say you have a normally blue button, but you need it to be green in this specific case. You can override the background colour from the parent component like this:</p><div class="language-html"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">green</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Make this button green</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">green</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">button</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">background</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> green</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>This <em>does</em> work, but it&#39;s very fragile and prone to breaking.</p><p>What if the class name changes?</p><p>What if the HTML of the component is modified?</p><p>Anyone making changes to the button component will have no idea that this component&#39;s background colour is overridden. They won&#39;t know to update this component too.</p><p>Instead, we can just extend the functionality of the button component. That way, we keep all of the code that modifies the button inside the button component.</p><p>Here, we can add a <code>is-green</code> prop to the button component:</p><div class="language-html"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">is-green</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Make this button green</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/* No extra styles needed! */</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>Adding to the component itself makes it easier for anyone else who might need this button to be green in the future!</p><p>I&#39;ve created a demo showing the original component and the new one with the added prop: <a href="https://codesandbox.io/s/wizardly-aryabhata-kn37d?file=/src/components/Button.vue" target="_blank" rel="noopener noreferrer">https://codesandbox.io/s/wizardly-aryabhata-kn37d?file=/src/components/Button.vue</a></p><h2 id="\u{1F4DC}-manual-testing-e2e-testing-unit-testing-\u2013-how-to-decide-which-testing-strategy-to-use" tabindex="-1">\u{1F4DC} Manual testing, E2E testing, unit testing \u2013 how to decide which testing strategy to use? <a class="header-anchor" href="#\u{1F4DC}-manual-testing-e2e-testing-unit-testing-\u2013-how-to-decide-which-testing-strategy-to-use" aria-hidden="true">#</a></h2><p>In this article Markus takes us through thinking about testing in terms of managing risk.</p><p>He gives some great thoughts on managing the balance between risk and reward in testing.</p><p>Read it here: <a href="https://markus.oberlehner.net/blog/manual-testing-e2e-testing-unit-testing-how-to-decide-which-testing-strategy-to-use/" target="_blank" rel="noopener noreferrer">Manual testing, E2E testing, unit testing \u2013 how to decide which testing strategy to use?</a></p><h2 id="\u{1F4AC}-libraries" tabindex="-1">\u{1F4AC} Libraries <a class="header-anchor" href="#\u{1F4AC}-libraries" aria-hidden="true">#</a></h2><p>&quot;Telling a programmer there&#39;s already a library to do X is like telling a songwriter there&#39;s already a song about love.&quot; \u2014Pete Cordell</p><h2 id="\u{1F9E0}-spaced-repetition-global-properties" tabindex="-1">\u{1F9E0} Spaced-repetition: Global Properties <a class="header-anchor" href="#\u{1F9E0}-spaced-repetition-global-properties" aria-hidden="true">#</a></h2><p><strong>The best way to commit something to long-term memory is to periodically review it, gradually increasing the time between reviews \u{1F468}\u200D\u{1F52C}</strong></p><p><strong>Actually remembering these tips is much more useful than just a quick distraction, so here&#39;s a tip from a couple weeks ago to jog your memory.</strong></p><p>It&#39;s possible to add global properties to your Vue app in both Vue 2 and Vue 3:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// Vue 3</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">globalProperties</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$myGlobal </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">globalpropertiesftw</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Vue 2</span></span>
<span class="line"><span style="color:#FFCB6B;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$myGlobal </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">globalpropertiesftw</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>I would recommend prefixing any global properties with a <code>$</code>.</p><p>This helps prevent naming conflicts with other variables, and it&#39;s a common convention that makes it easy to spot when a value is global.</p><p>This global property can be accessed directly off of any component when using the Options API:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#FFCB6B;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">getGlobalProperty</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$myGlobal</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">},</span></span>
<span class="line"></span></code></pre></div><p>Why can&#39;t this be used with the composition API?</p><p>Because the composition API is designed to be context-free, and has no access to <code>this</code>.</p><p>Instead, you can create a simple composable to access your globals:</p><div class="language-html"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> useGlobals </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./useGlobals</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> $myGlobal </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useGlobals</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// useGlobals.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$myGlobal</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">globalpropertiesftw</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><em>p.s. I also have two courses: <a href="https://michaelnthiessen.com/reusable-components" target="_blank" rel="noopener noreferrer">Reusable Components</a> and <a href="https://michaelnthiessen.com/clean-components" target="_blank" rel="noopener noreferrer">Clean Components</a></em></p><h2 id="\u6765\u6E90" tabindex="-1">\u6765\u6E90 <a class="header-anchor" href="#\u6765\u6E90" aria-hidden="true">#</a></h2><p>\u539F\u6587 <a href="https://michaelnthiessen.com/weekly-060-may-11/" target="_blank" rel="noopener noreferrer">https://michaelnthiessen.com/weekly-060-may-11/</a></p><p>\u672C\u4F5C\u54C1\u91C7\u7528<a href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="noopener noreferrer">\u77E5\u8BC6\u5171\u4EAB\u7F72\u540D-\u76F8\u540C\u65B9\u5F0F\u5171\u4EAB 4.0 \u56FD\u9645\u8BB8\u53EF\u534F\u8BAE</a>\u8FDB\u884C\u8BB8\u53EF\u3002</p>`,58),l=[t];function p(r,c,i,y,D,F){return n(),a("div",null,l)}var g=s(o,[["render",p]]);export{d as __pageData,g as default};
