import{_ as e,c as s,o as n,a}from"./app.26666769.js";const D=JSON.parse('{"title":"\u{1F525} (#63) Announcing: Vue Tips Collection \u{1F389}","description":"","frontmatter":{"title":"\u{1F525} (#63) Announcing: Vue Tips Collection \u{1F389}","head":[["link",{"rel":"canonical","href":"https://michaelnthiessen.com/weekly-063-june-01/"}]]},"headers":[{"level":2,"title":"\u{1F525} Structuring Composables","slug":"\u{1F525}-structuring-composables"},{"level":2,"title":"\u{1F525} Reactive CSS","slug":"\u{1F525}-reactive-css"},{"level":2,"title":"\u{1F4DC} Mark Raw Optimization","slug":"\u{1F4DC}-mark-raw-optimization"},{"level":2,"title":"\u{1F4AC} It always takes longer","slug":"\u{1F4AC}-it-always-takes-longer"},{"level":2,"title":"\u{1F9E0} Spaced-repetition: Directives in Render Functions","slug":"\u{1F9E0}-spaced-repetition-directives-in-render-functions"},{"level":2,"title":"\u6765\u6E90","slug":"\u6765\u6E90"}],"relativePath":"063.md"}'),o={name:"063.md"},t=a(`<h1 id="\u{1F525}-63-announcing-vue-tips-collection-\u{1F389}" tabindex="-1">\u{1F525} (#63) Announcing: Vue Tips Collection \u{1F389} <a class="header-anchor" href="#\u{1F525}-63-announcing-vue-tips-collection-\u{1F389}" aria-hidden="true">#</a></h1><p>June 2022</p><p><img src="" alt=""></p><p>Announcing...</p><p>\u{1F389} <strong>Vue Tips Collection</strong> \u{1F389}</p><p>A collection of 100+ concise and practical tips on Vue, packaged into a stunning book.</p><p>It will be available on <strong>June 20th!</strong></p><p>(that&#39;s only <em>2.5 weeks</em> from now!)</p><p>I&#39;ve been working hard on this one for a long time, and put my heart and soul into it.</p><p><a href="https://michaelnthiessen.com/vue-tips-collection" target="_blank" rel="noopener noreferrer">Click here to learn more</a></p><p>...and now we&#39;ll return to our regularly scheduled tips.</p><p>\u2014 Michael</p><h2 id="\u{1F525}-structuring-composables" tabindex="-1">\u{1F525} Structuring Composables <a class="header-anchor" href="#\u{1F525}-structuring-composables" aria-hidden="true">#</a></h2><p>To keep your composables \u2014 those extracted functions written using the composition API \u2014 neat and easy to read, here&#39;s a way to organize the code.</p><ol><li>Component and directives</li><li><code>provide</code> and <code>inject</code></li><li><code>defineProps</code>, <code>defineEmits</code>, and <code>defineExpose</code> (when using <code>script setup</code>)</li><li><code>refs</code> and <code>reactive</code> variables</li><li>Computed properties</li><li>Immediate watchers</li><li>Watchers</li><li>Lifecycle methods, in <a href="https://v3.vuejs.org/guide/composition-api-lifecycle-hooks.html" target="_blank" rel="noopener noreferrer">their correct order</a></li><li>Non-reactive state</li><li>Methods</li><li>Async code using <code>await</code> (or Promises if you&#39;re into that sort of thing)</li></ol><p>Why this order? Because it more or less follows the order of execution of the code.</p><p>It&#39;s also based on the <a href="https://v3.vuejs.org/style-guide/#component-instance-options-order-recommended" target="_blank" rel="noopener noreferrer">Vue 3 styleguide</a>.</p><p>The <code>await</code> needs to go at the end because most of your logic you&#39;ll want to be registered before the <code>setup</code> function returns. Anything after the <code>await</code> will only be executed asynchronously.</p><h2 id="\u{1F525}-reactive-css" tabindex="-1">\u{1F525} Reactive CSS <a class="header-anchor" href="#\u{1F525}-reactive-css" aria-hidden="true">#</a></h2><p>In Vue 3 we can use reactive values in our <code>&lt;style&gt;</code> block just like we can in the <code>&lt;template&gt;</code> block:</p><div class="language-html"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">scoped</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">button</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> v-bind(buttonColor)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>Behind the scenes, Vue uses CSS computed properties (aka CSS variables) scoped to each component.</p><p>The CSS remains static, but we can dynamically update the CSS variables whenever the reactive value changes.</p><p>More info can be found <a href="https://v3.vuejs.org/api/sfc-style.html#state-driven-dynamic-css" target="_blank" rel="noopener noreferrer">in the docs</a>.</p><h2 id="\u{1F4DC}-mark-raw-optimization" tabindex="-1">\u{1F4DC} Mark Raw Optimization <a class="header-anchor" href="#\u{1F4DC}-mark-raw-optimization" aria-hidden="true">#</a></h2><p>This article takes a deeper look at VueUse&#39;s <code>useManualRefHistory</code>, and how we can optimize our non-reactive state when it gets large.</p><p>Read it here: <a href="https://patak.dev/vue/mark-raw-optimization.html" target="_blank" rel="noopener noreferrer">Mark Raw Optimization</a></p><h2 id="\u{1F4AC}-it-always-takes-longer" tabindex="-1">\u{1F4AC} It always takes longer <a class="header-anchor" href="#\u{1F4AC}-it-always-takes-longer" aria-hidden="true">#</a></h2><p>&quot;It always takes longer than you expect, even when you take into account Hofstadter&#39;s Law.&quot; \u2014Hofstadter&#39;s Law</p><h2 id="\u{1F9E0}-spaced-repetition-directives-in-render-functions" tabindex="-1">\u{1F9E0} Spaced-repetition: Directives in Render Functions <a class="header-anchor" href="#\u{1F9E0}-spaced-repetition-directives-in-render-functions" aria-hidden="true">#</a></h2><p><strong>The best way to commit something to long-term memory is to periodically review it, gradually increasing the time between reviews \u{1F468}\u200D\u{1F52C}</strong></p><p><strong>Actually remembering these tips is much more useful than just a quick distraction, so here&#39;s a tip from a couple weeks ago to jog your memory.</strong></p><p>Vue comes with some methods to help you use custom directives on your VNodes:</p><div class="language-html"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">resolveDirective</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">withDirectives</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">h</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Find the already registered directive by name</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> focusDirective </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">resolveDirective</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">focus</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Wrap the button with the directive</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> render </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">withDirectives</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> [])</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// An array of directives to apply</span></span>
<span class="line"><span style="color:#A6ACCD;">      [[focusDirective]]</span></span>
<span class="line"><span style="color:#A6ACCD;">    )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>You can find more info on using <code>withDirectives</code> <a href="https://v3.vuejs.org/api/global-api.html#withdirectives" target="_blank" rel="noopener noreferrer">on the docs</a>.</p><p><em>p.s. I also have two courses: <a href="https://michaelnthiessen.com/reusable-components" target="_blank" rel="noopener noreferrer">Reusable Components</a> and <a href="https://michaelnthiessen.com/clean-components" target="_blank" rel="noopener noreferrer">Clean Components</a></em></p><h2 id="\u6765\u6E90" tabindex="-1">\u6765\u6E90 <a class="header-anchor" href="#\u6765\u6E90" aria-hidden="true">#</a></h2><p>\u539F\u6587 <a href="https://michaelnthiessen.com/weekly-063-june-01/" target="_blank" rel="noopener noreferrer">https://michaelnthiessen.com/weekly-063-june-01/</a></p><p>\u672C\u4F5C\u54C1\u91C7\u7528<a href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="noopener noreferrer">\u77E5\u8BC6\u5171\u4EAB\u7F72\u540D-\u76F8\u540C\u65B9\u5F0F\u5171\u4EAB 4.0 \u56FD\u9645\u8BB8\u53EF\u534F\u8BAE</a>\u8FDB\u884C\u8BB8\u53EF\u3002</p>`,39),l=[t];function r(p,c,i,d,h,y){return n(),s("div",null,l)}var m=e(o,[["render",r]]);export{D as __pageData,m as default};
