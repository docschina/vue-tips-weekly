import{_ as s,c as e,o as a,a as n}from"./app.2c680187.js";const d=JSON.parse(`{"title":"\u{1F525} (#67) One source of truth","description":"","frontmatter":{"title":"\u{1F525} (#67) One source of truth","head":[["link",{"rel":"canonical","href":"https://michaelnthiessen.com/weekly-067-june-29/"}]]},"headers":[{"level":2,"title":"\u{1F525} Watching Arrays and Objects","slug":"\u{1F525}-watching-arrays-and-objects"},{"level":2,"title":"\u{1F525} Why there must be one source of truth","slug":"\u{1F525}-why-there-must-be-one-source-of-truth"},{"level":2,"title":"\u{1F4DC} Nuxt 3 State Management: Pinia vs useState","slug":"\u{1F4DC}-nuxt-3-state-management-pinia-vs-usestate"},{"level":2,"title":"\u{1F426} Discussion: Putting async logic in stores","slug":"\u{1F426}-discussion-putting-async-logic-in-stores"},{"level":2,"title":"\u{1F4AC} Gall's Law","slug":"\u{1F4AC}-gall-s-law"},{"level":2,"title":"\u{1F9E0} Spaced-repetition: Detect Clicks Outside an Element","slug":"\u{1F9E0}-spaced-repetition-detect-clicks-outside-an-element"},{"level":2,"title":"\u6765\u6E90","slug":"\u6765\u6E90"}],"relativePath":"067.md"}`),t={name:"067.md"},o=n(`<h1 id="\u{1F525}-67-one-source-of-truth" tabindex="-1">\u{1F525} (#67) One source of truth <a class="header-anchor" href="#\u{1F525}-67-one-source-of-truth" aria-hidden="true">#</a></h1><p>June 2022</p><p>Hey there!</p><p>Vue Tips Collection was a massive success!</p><p>Over 400 copies were sold, nearly 100 of them hardcovers. Absolutely insane! \u{1F92F}</p><p>Now I&#39;m taking time to &quot;refactor&quot; some parts of my business and clean up some tech debt. After a big release, it&#39;s nice to go back, clean up, and improve things.</p><p>I wanted to get PayPal working before the launch, so the integration is a bit hacky right now. Actually, I&#39;m manually fulfilling all PayPal orders currently. Definitely not the best experience for you, so I&#39;m automating that part.</p><p>I also want to build a self-service invoice tool. There&#39;s no reason you should have to email me and wait for me to create one and then send it back. That can all be automated as well.</p><p>Not anything super exciting, but it saves us all time and headaches \u2014 especially me!</p><p>And it&#39;s <em>so</em> liberating that I can just write whatever tool I need to improve my business.</p><p>Software development is fun.</p><p>\u2014 Michael</p><h2 id="\u{1F525}-watching-arrays-and-objects" tabindex="-1">\u{1F525} Watching Arrays and Objects <a class="header-anchor" href="#\u{1F525}-watching-arrays-and-objects" aria-hidden="true">#</a></h2><p>The trickiest part of using a watcher is that sometimes it doesn&#39;t seem to trigger correctly.</p><p>Usually, this is because you&#39;re trying to watch an Array or an Object but didn&#39;t set <code>deep</code> to <code>true</code>:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ColourChange</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">colours</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">required</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">watch</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Use the object syntax instead of just a method</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">colours</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// This will let Vue know to look inside the array</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">deep</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// We have to move our method to a handler field</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">handler</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        console.</span><span style="color:#F07178;">log</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">The list of colours has changed!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div><p>Using the reactivity API from Vue 3 would look like this:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  colours</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">The list of colours has changed!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">deep</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Here are the docs for <a href="https://v3.vuejs.org/api/computed-watch-api.html#computed" target="_blank" rel="noopener noreferrer">Vue 3</a> and <a href="https://vuejs.org/v2/api/#watch" target="_blank" rel="noopener noreferrer">Vue 2</a> if you want to read more on this.</p><h2 id="\u{1F525}-why-there-must-be-one-source-of-truth" tabindex="-1">\u{1F525} Why there must be one source of truth <a class="header-anchor" href="#\u{1F525}-why-there-must-be-one-source-of-truth" aria-hidden="true">#</a></h2><p>This is the most critical principle of state management that I know:</p><p><strong>Each piece of state has a single owner, a single source of truth.</strong></p><p>No one else is allowed to modify the state. It&#39;s just borrowed temporarily.</p><p>If you have an array in a Vuex store, only that Vuex store can update it. Anywhere in your app that needs that value <em>must</em> get it from the store (directly or through another component).</p><p>If the state is owned by a component, only that component can modify it. This means other components must emit an event to that component, which can then decide what it wants to do.</p><p>Why?</p><p>If you allow state to be modified from anywhere, your code becomes a tangled mess.</p><p>With a single source of truth, you can easily understand what&#39;s happening.</p><p>The best code is easily understood.</p><h2 id="\u{1F4DC}-nuxt-3-state-management-pinia-vs-usestate" tabindex="-1">\u{1F4DC} Nuxt 3 State Management: Pinia vs useState <a class="header-anchor" href="#\u{1F4DC}-nuxt-3-state-management-pinia-vs-usestate" aria-hidden="true">#</a></h2><p>In Nuxt 3 we get a new <code>useState</code> composable.</p><p>But how does it compare to Pinia?</p><p>In this article for Vue Mastery, I discuss the main differences and when to use each.</p><p>Read it here: <a href="https://www.vuemastery.com/blog/nuxt-3-state-mangement-pinia-vs-usestate" target="_blank" rel="noopener noreferrer">Nuxt 3 State Management: Pinia vs useState</a></p><h2 id="\u{1F426}-discussion-putting-async-logic-in-stores" tabindex="-1">\u{1F426} Discussion: Putting async logic in stores <a class="header-anchor" href="#\u{1F426}-discussion-putting-async-logic-in-stores" aria-hidden="true">#</a></h2><p>There was a great discussion on Twitter last week about putting async logic inside of Vuex/Pinia stores.</p><p>The replies I got were very interesting, and I have a lot to mull over now.</p><p><a href="https://twitter.com/MichaelThiessen/status/1539636683187990528?s=20&amp;t=ypNbws17ocbLF7w2CKhPxw" target="_blank" rel="noopener noreferrer">https://twitter.com/MichaelThiessen/status/1539636683187990528?s=20&amp;t=ypNbws17ocbLF7w2CKhPxw</a></p><h2 id="\u{1F4AC}-gall-s-law" tabindex="-1">\u{1F4AC} Gall&#39;s Law <a class="header-anchor" href="#\u{1F4AC}-gall-s-law" aria-hidden="true">#</a></h2><p>&quot;A complex system that works is invariably found to have evolved from a simple system that worked. The inverse proposition also appears to be true: A complex system designed from scratch never works and cannot be made to work. You have to start over, beginning with a working simple system.&quot; \u2014John Gall</p><h2 id="\u{1F9E0}-spaced-repetition-detect-clicks-outside-an-element" tabindex="-1">\u{1F9E0} Spaced-repetition: Detect Clicks Outside an Element <a class="header-anchor" href="#\u{1F9E0}-spaced-repetition-detect-clicks-outside-an-element" aria-hidden="true">#</a></h2><p><strong>The best way to commit something to long-term memory is to periodically review it, gradually increasing the time between reviews \u{1F468}\u200D\u{1F52C}</strong></p><p><strong>Actually remembering these tips is much more useful than just a quick distraction, so here&#39;s a tip from a couple weeks ago to jog your memory.</strong></p><p>Sometimes I need to detect whether a click happens <em>inside</em> or <em>outside</em> of a particular element. This is the approach I typically use:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mousedown</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Get the element that was clicked</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">clickedEl</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// \`el\` is the element you&#39;re detecting clicks outside of</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">contains</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">clickedEl</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Clicked inside of \`el\`</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Clicked outside of \`el\`</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><em>p.s. I also have two courses: <a href="https://michaelnthiessen.com/reusable-components" target="_blank" rel="noopener noreferrer">Reusable Components</a> and <a href="https://michaelnthiessen.com/clean-components" target="_blank" rel="noopener noreferrer">Clean Components</a></em></p><h2 id="\u6765\u6E90" tabindex="-1">\u6765\u6E90 <a class="header-anchor" href="#\u6765\u6E90" aria-hidden="true">#</a></h2><p>\u539F\u6587 <a href="https://michaelnthiessen.com/weekly-067-june-29/" target="_blank" rel="noopener noreferrer">https://michaelnthiessen.com/weekly-067-june-29/</a></p><p>\u672C\u4F5C\u54C1\u91C7\u7528<a href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="noopener noreferrer">\u77E5\u8BC6\u5171\u4EAB\u7F72\u540D-\u76F8\u540C\u65B9\u5F0F\u5171\u4EAB 4.0 \u56FD\u9645\u8BB8\u53EF\u534F\u8BAE</a>\u8FDB\u884C\u8BB8\u53EF\u3002</p>`,49),l=[o];function p(r,c,i,y,h,D){return a(),e("div",null,l)}var F=s(t,[["render",p]]);export{d as __pageData,F as default};
